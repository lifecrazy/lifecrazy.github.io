<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode腾讯精选练习之螺旋矩阵（八）</title>
      <link href="/2020/02/01/leetcode-8/"/>
      <url>/2020/02/01/leetcode-8/</url>
      
        <content type="html"><![CDATA[<h3 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。<br>示例 1:<br>输入:<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1, 2, 3 ],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 4, 5, 6 ],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 7, 8, 9 ]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>输出: [1,2,3,6,9,8,7,4,5]<br>示例 2:<br>输入:<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  [1, 2, 3, 4],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  [5, 6, 7, 8],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  [9,10,11,12]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><strong>1.判断矩阵是否为空矩阵，如果为空则直接返回。<br>2.从左向右遍历，行坐标不变，列坐标从小到大，直至该行遍历结束，然后将行坐标自增并判断矩阵是否遍历结束。<br>3.从上向下遍历，列坐标不变，行坐标从小到大，直至该列遍历完毕，然后将列坐标自减并判断该矩阵是否遍历结束。<br>4.从左向右遍历，行坐标不变，列坐标从大到小，直至该行遍历结束，然后将行坐标自减并判断矩阵是否遍历结束。<br>5.从下向上遍历，列坐标不变，行坐标从大到小，直至该列遍历完毕，然后将该列坐标自增并判断是否遍历结束。<br>6.依次重复2，3，4，5过程，直至整个矩阵遍历完毕。</strong></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code>vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {    vector&lt;int&gt; res;    if (matrix.empty()) return res;    int beginX = 0;    int endX = matrix[0].size() - 1;    int beginY = 0;    int endY = matrix.size() - 1;    while (true)    {        //从左到右        for (int i = beginX; i &lt;= endX; i++)        {            res.push_back(matrix[beginY][i]);        }        if (++beginY &gt; endY)        {            break;        }        //从上到下        for (int i = beginY; i &lt;= endY; ++i) {            res.push_back(matrix[i][endX]);        }        if (beginX &gt; --endX)        {            break;        }        // 从右到左        for (int i = endX; i &gt;= beginX; --i)        {            res.push_back(matrix[endY][i]);        }        if (beginY &gt; --endY)        {        break;        }        // 从下往上        for (int i = endY; i &gt;= beginY; --i)        {            res.push_back(matrix[i][beginX]);        }        if (++beginX &gt; endX)        {            break;        }    }    return res;}</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><font color='red'>1.确定好要遍历的矩阵的左上角和右小角的坐标，即确定每一轮遍历的起点和终点。<br>2.确定每个过程坐标变换的规律。<br>3.该题不难，只是情况多了一些，按照要求一步一步分析，就不会有遗漏。</font></p><h3 id="螺旋矩阵-II"><a href="#螺旋矩阵-II" class="headerlink" title="螺旋矩阵 II"></a>螺旋矩阵 II</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。<br>示例:<br>输入: 3<br>输出:<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1, 2, 3 ],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 8, 9, 4 ],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 7, 6, 5 ]<br>&nbsp;&nbsp;&nbsp;&nbsp;]</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p><strong>该题的遍历方法与上个题目一样</strong></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code>vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) {    vector&lt;vector&lt;int&gt; &gt; res(n, vector&lt;int&gt;(n));    if (n == 0)    {        return res;    }    int beginX = 0;    int endX = n - 1;    int beginY = 0;    int endY = n - 1;    int index = 1;    while (true) {        //从左到右        for (int i = beginX; i &lt;= endX; i++)        {            res[beginY][i] = index++;        }        if (++beginY &gt; endY)        {            break;        }        //从上到下        for (int i = beginY; i &lt;= endY; ++i) {            res[i][endX] = index++;        }        if (beginX &gt; --endX)        {            break;        }        // 从右到左        for (int i = endX; i &gt;= beginX; --i)        {            res[endY][i] = index++;        }        if (beginY &gt; --endY)        {            break;        }        // 从下往上        for (int i = endY; i &gt;= beginY; --i)        {            res[i][beginX] = index++;        }        if (++beginX &gt; endX)        {            break;        }    }    return res;}</code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><font color='red'>偷了个懒，从上个题目直接拷贝过来，修改一下遍历操作，这个题目就完成了。</p><p>  万变不离其宗，掌握了方法，题目都是一样的</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之删除链表中的结点（七）</title>
      <link href="/2020/01/21/leetcode-7/"/>
      <url>/2020/01/21/leetcode-7/</url>
      
        <content type="html"><![CDATA[<h2 id="删除链表中的结点"><a href="#删除链表中的结点" class="headerlink" title="删除链表中的结点"></a>删除链表中的结点</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。<br>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br>示例 1:<br>输入: head = [4,5,1,9], node = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.<br>示例 2:<br>输入: head = [4,5,1,9], node = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>1.将当前结点的下一个结点的值赋值给当前结点。<br>2.将下一个结点赋值给临时指针<br>3.将当前结点的下一个结点的下一个结点赋值给当前结点的下一个结点<br>4.删除当前结点的下一个结点</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>void deleteNode(ListNode* node) {    node-&gt;val = node-&gt;next-&gt;val;    ListNode* temp = node-&gt;next;    node-&gt;next = node-&gt;next-&gt;next;    delete temp;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>基本的链表删除结点操作</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之相交链表（六）</title>
      <link href="/2020/01/20/leetcode-6/"/>
      <url>/2020/01/20/leetcode-6/</url>
      
        <content type="html"><![CDATA[<h2 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>编写一个程序，找到两个单链表相交的起始节点。<br>如下面的两个链表：<br>在节点 c1 开始相交。<br>示例 1：<br>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>示例 2：<br>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br>示例 3：<br>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><blockquote><p>分别定义两个指针以相同的速度前进，在相同长度的链表上移动，如果两个链表有交点，那么两个指针一定会相遇（即相同）。但是题目给的两个链表不可能长度相同，应该怎么办呢，那就先求出两个链表的长度，然后再将比较长的链表先移动两个链表长度差值个结点，这样就可以确保整个链表在移动的过程中等长了。</p></blockquote><p><strong>1.统计出两个链表长度countA和countB<br>2.让长度长的链表先移动|countA - countB|个结点。<br>3.然后两个链表同时移动，如果指向两个链表的指针相同则为交点。</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {ListNode* pFirst = headA;ListNode* pSec = headB;int countA = 0;int countB = 0;while(pFirst != NULL) {    countA++;    pFirst = pFirst-&gt;next;}pFirst = headA;while(pSec != NULL) {    countB++;    pSec = pSec-&gt;next;}pSec = headB;if (countA &gt; countB) {    for (int i = 0; i &lt; countA - countB; ++i) {    pFirst = pFirst-&gt;next;    }} else {    for (int i = 0; i &lt; countB - countA; ++i) {    pSec = pSec-&gt;next;    }}while (pFirst != NULL &amp;&amp; pSec != NULL) {    if (pFirst == pSec) {    return pFirst;    }    pFirst = pFirst-&gt;next;    pSec = pSec-&gt;next;}return NULL;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>这个题目的关键点是不等长的两个链表应该先调整到等长的位置，在寻找交点。</font> </p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之环形链表（五）</title>
      <link href="/2020/01/19/leetcode-5/"/>
      <url>/2020/01/19/leetcode-5/</url>
      
        <content type="html"><![CDATA[<h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给定一个链表，判断链表中是否有环。<br>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。<br>示例 1：<br>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：<br>输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：<br>输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>定义两个指针，一个指针每次移动一个结点，称作慢指针;另一个指针每次移动两个结点,称作快指针，两个指针同时开始移动，如果该链表有环，那么这两个指针会相遇，如果链表没有环，那么链表始终不会相遇。</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>bool hasCycle(ListNode *head) {    if (head == NULL || head-&gt;next == NULL) {        return false;    }    ListNode* pSlow = head;    ListNode* pFast = head;    while (pFast != NULL &amp;&amp; pFast-&gt;next != NULL) {        pSlow = pSlow-&gt;next;        pFast = pFast-&gt;next-&gt;next;        if (pSlow == pFast) {        return true;        }    }    return false;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>1.首先遇到这个题目需要又快慢指针的思路<br>2.快慢指针相遇时，慢指针还没走完整个链表。这是结论。解释一下：第一种情况：慢指针到达环的入口结点时，快指针恰好也在。第二种情况：极端假设慢指针到达环的入口结点时，快指针假设就在入口结点的下一个结点，如果慢指针已经走完一圈，那么快指针已经走完两圈，那么他们在这期间内一定相遇过一次。所以有开头的结论。</font> </p><h2 id="环形链表-II"><a href="#环形链表-II" class="headerlink" title="环形链表 II"></a>环形链表 II</h2><h3 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。<br>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。<br>说明：不允许修改给定的链表。<br>示例 1：<br>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：<br>输入：head = [1,2], pos = 0<br>输出：tail connects to node index 0<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：<br>输入：head = [1], pos = -1<br>输出：no cycle<br>解释：链表中没有环。  </p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><blockquote><p>根据数学公式快慢指针第一次相遇时慢指针移动的距离S=L+X,L为从开始结点到环的起始结点的距离，X为慢指针再环上移动的距离，快指针移动的距离等于2S=L+x+n<em>R,n</em>R表示快指针已经移动了n圈。<br>有这两个公式可以得出：nR = L + x,也就是说慢指针再移动L的距离可以到达环的起点，这个距离与开始结点到环的起点的距离相等<br><strong>1.定义快慢指针找到相遇点<br>2.在定义一个指针从开始结点开始移动直到与慢指针相遇，即为环的起始结点</strong></p></blockquote><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><pre><code>ListNode* detectCycle(ListNode* head) {    if (head == NULL || head-&gt;next == NULL) {        return NULL;    }    ListNode* pSlow = head;    ListNode* pFast = head;    bool hasCycle = false;    while (pFast != NULL &amp;&amp; pFast-&gt;next != NULL) {        pSlow = pSlow-&gt;next;        pFast = pFast-&gt;next-&gt;next;        if (pSlow == pFast) {            hasCycle = true;            break;        }    }    ListNode* pStart = head;    if (hasCycle)    {        while (pSlow != pStart)        {            pSlow = pSlow-&gt;next;            pStart = pStart-&gt;next;        }        return pStart;    }    return NULL;}</code></pre><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>除了用数学的方法定量计算出环的起始点，尚没有什么好的思路</font> </p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之旋转链表（四）</title>
      <link href="/2020/01/16/leetcode-4/"/>
      <url>/2020/01/16/leetcode-4/</url>
      
        <content type="html"><![CDATA[<h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。<br>示例 1:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>    向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>    向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>示例 2:<br>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL  </p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><blockquote><p>再说这个题目的解题步骤之前先说说这个题目的理解，就是链表倒着数k个结点，然后断开k+1和k个结点之间的联接将其分成两个链表。然后将前后两个链表调换一下位置重新连接起来。（当然当k大于链表长度的时候需要取模运算）</p></blockquote><p><strong>1.计算链表的长度。<br>2.定义一个指针pPre指向头结点，移动k步。<br>3.定义一个指针pCur指向头结点，同时向前移动pPre和pCur指针直到pPre遍历完整个链表，此时pCur即为倒数第k个结点。<br>4.在第k个结点处断开链表，再将前后两个链表交换顺序后重新连接起来。</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>ListNode* rotateRight(ListNode* head, int k) {    if (head == NULL || head-&gt;next == NULL)    {        return head;    }    ListNode* pPre = head;    int count = 0;    while (pPre != NULL)    {        pPre = pPre-&gt;next;        count++;    }    ListNode* pCur = head;    pPre = head;    for (int i = 0; i &lt; k % count; i++)    {        pPre = pPre-&gt;next;    }    if (pPre != NULL)    {        while (pPre-&gt;next != NULL)        {            pPre = pPre-&gt;next;            pCur = pCur-&gt;next;        }        pPre-&gt;next = head;        head = pCur-&gt;next;        pCur-&gt;next = NULL;    }    return head;}</code></pre><p>改进版：  </p><pre><code>ListNode* rotateRight(ListNode* head, int k) {    if (head == NULL || k == 0)    {        return head;    }    int count = 1;    ListNode* p = head;    while (p-&gt;next)    {        count++;        p = p-&gt;next;    }    int left = count - k % count;    p-&gt;next = head;    for (int i = 0; i &lt; left; ++i)    {        p = p-&gt;next;    }    head = p-&gt;next;    p-&gt;next = NULL;    return head;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>1.解题的关键是如何将题目转化为找到倒数第k个结点<br>2.另外一个巧妙的地方是循环向前移动两个指针的时候判断的是pPre-&gt;next是否为NULL，这样可以将pPre和pCur分别定位到断开链表后的的最后一个结点上，方便断开的链表进行联接。<br>3.改进版是我在网上看到别人的思路实现的。首先统计整个链表的长度，同时将一个指针指向链表的最后一个结点，然后将链表首尾联接起来，组成一个环，然后用数学的方法计算出正着数应该移动left步，然后将指向最后一个结点的指针移动left步，最后在这个位置将链表断开即得到结果。</font><br><strong><em>有时候思路真的就是一层窗户纸</em></strong><br><img src="https://img2018.cnblogs.com/blog/383281/202001/383281-20200116220710507-168975733.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之链表逆置（三）</title>
      <link href="/2020/01/14/leetcode-3/"/>
      <url>/2020/01/14/leetcode-3/</url>
      
        <content type="html"><![CDATA[<h2 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>反转一个单链表。<br>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>1.定义一个结点指针pCur指向当前链表,再定义一个指针pPre指向前一个结点,初始化为NULL。<br>2.循环遍历该链表，定义一个临时指针pNext指向当前链表的下一个结点,然后断开当前结点和下一个结点的指针关系，让当前结点的指针pCur的next指向pPre,即完成当前结点的反转。然后前移pPre指针和pCur指针，循环顺序执行该操作。<br>3.当临时指针pNext为NULL的时候说明pCur指针已经走到该链表的最后一个结点</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>ListNode* reverseList(ListNode* head) {    ListNode* pPre = NULL;    ListNode* pCur = head;    while (pCur != NULL)    {        ListNode* pNext = pCur-&gt;next;        pCur-&gt;next = pPre;        pPre = pCur;        if (pNext == NULL)        {            return pCur;        }        pCur = pNext;    }    return pCur;}</code></pre><p>改进版：</p><pre><code>ListNode* reverseList(ListNode* head) {    ListNode* pPre = NULL;    ListNode* pCur = head;    ListNode* pNext =NULL;    while (pCur != NULL)    {        pNext = pCur-&gt;next;        pCur-&gt;next = pPre;        pPre = pCur;        pCur = pNext;    }    return pPre;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>1.思路很简单就是指针交换确定好指针交换的顺序就行<br>2.改进版本的思路还是一样，只是减少了判断的次数，数据量大的时候时间节约比较明显，小数据量差距不大。</font><br><strong><em>纸上得来终觉浅，绝知此事要躬行</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之合并有序链表（二）</title>
      <link href="/2020/01/13/leetcode-2/"/>
      <url>/2020/01/13/leetcode-2/</url>
      
        <content type="html"><![CDATA[<h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><blockquote><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>*<font color='red'>鉴于上个题目两个数相加之和的总结，这次不在定义两个临时变量指向两个链表，直接遍历两个链表</font>*</strong><br><strong>1.定义一个带头结点的链表<br>2.遍历两个链表l1、l2,比较两个链表当前结点的值的大小，小结点直接插入结果链表，同时向后移动该链表，循环此过程直到其中一个链表为NULL结束。<br>3.将不为NULL的链表插入到结果链表上</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {    ListNode res(-1);    ListNode* pRes = &amp;res;    while (l1 != NULL &amp;&amp; l2 != NULL)    {        if (l1-&gt;val &gt; l2-&gt;val)        {            pRes-&gt;next = l2;            l2 = l2-&gt;next;        }        else {            pRes-&gt;next = l1;            l1 = l1-&gt;next;        }        pRes = pRes-&gt;next;    }    if (l1 == NULL)    {        pRes-&gt;next = l2;    }    if (l2 == NULL)    {        pRes-&gt;next = l1;    }    return res.next;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><font color='red'>有了上一道题目优化经验，就可以直接省去一些思考的中间环节，直接写出一次性满意的代码。<br></font></p><h2 id="合并K个排序链表"><a href="#合并K个排序链表" class="headerlink" title="合并K个排序链表"></a>合并K个排序链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。<br>示例:<br>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>1.合并K个链表就是选择两个先合并成一个链表再将合成后的链表与剩余的链表一一合并得出最终的结果<br>2.合并两个链表直接调用上到题目完成的函数。</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><p>常规思路：  </p><pre><code>ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {    ListNode res(-1);    ListNode* pRes = &amp;res;    for (size_t i = 0; i &lt; lists.size(); i++)    {        pRes-&gt;next = mergeTwoLists(lists[i], pRes-&gt;next);    }    return res.next;}</code></pre><p>递归思路：</p><pre><code>ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {    int size = lists.size();    if (size == 0)     {        return NULL;    }    if (size == 1)     {         return lists[0];     }    for (int i = 0; i &lt; size / 2; i++)    {        lists[i] = mergeTwoLists(lists[i], lists[size - i - 1]);        lists.pop_back();    }    ListNode res(-1);    res.next = mergeKLists(lists);    return res.next;}</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><font color='red'>1.常规思路就是将每一个链表逐一合并。<br>2.递归思路是将链表两两分成一组进行合并，最终将所有的分组再次进行两两合并，直到合并为一个链表为止，这就是递归分治的思路<br>3.对比两种思路：递归思路减少了合并的次数。<br></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode腾讯精选练习之两数相加（一）</title>
      <link href="/2020/01/12/leetcode-1/"/>
      <url>/2020/01/12/leetcode-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1.两数相加"></a>1.两数相加</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><blockquote><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p></blockquote><blockquote><p>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>1.定义一个带头结点的链表同时定义一个指针指向该结点<br>2.定义两个指针分别指向两个链表的头结点<br>3.定义一个int的进位标志c<br>4.循环遍历两个链表对应结点的值相加然后和10取余获取当前结点的值，做除法运算获取是否需要近卫，结果链表采用尾插法保证顺序<br>5.遍历结束后，判断最后一位相加的结果是否有进位，如果进位标志大于0说明有进位在插入一个进位结点</strong></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p>第一版：</p><pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {    ListNode res(-1);    ListNode* p1 = l1;    ListNode* p2 = l2;    ListNode* pRes = &amp;res;    int c = 0;    while (p1 != NULL || p2 != NULL)    {        int pA = p1 == NULL ? 0 : p1-&gt;val;        int pB = p2 == NULL ? 0 : p2-&gt;val;        int tmp = pA + pB + c;        c = tmp / 10;        pRes-&gt;next = new ListNode(tmp % 10);        pRes = pRes-&gt;next;        p1 = p1 == NULL ? NULL : p1-&gt;next;        p2 = p2 == NULL ? NULL : p2-&gt;next;    }    if (c &gt; 0)    {        pRes-&gt;next = new ListNode(c);    }    return res.next;}</code></pre><p>第二版：</p><pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {    ListNode res(-1);    ListNode* pRes = &amp;res;    int c = 0;    while (l1 != NULL || l2 != NULL)    {        int pA = l1 == NULL ? 0 : l1-&gt;val;        int pB = l2 == NULL ? 0 : l2-&gt;val;        int tmp = pA + pB + c;        c = tmp / 10;        pRes-&gt;next = new ListNode(tmp % 10);        pRes = pRes-&gt;next;        l1 = l1 == NULL ? NULL : l1-&gt;next;        l2 = l2 == NULL ? NULL : l2-&gt;next;    }    if (c &gt; 0)    {        pRes-&gt;next = new ListNode(c);    }    return res.next;} </code></pre><p>终版：</p><pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {    ListNode res(-1);    ListNode* pRes = &amp;res;    int c = 0;    while (l1 != NULL || l2 != NULL)    {        int tmp = c;        if (l1 !=NULL)        {            tmp += l1-&gt;val;            l1 = l1-&gt;next;        }        if (l2 != NULL)        {            tmp += l2-&gt;val;            l2 = l2-&gt;next;        }        c = tmp / 10;        pRes-&gt;next = new ListNode(tmp % 10);        pRes = pRes-&gt;next;    }    if (c &gt; 0)    {        pRes-&gt;next = new ListNode(c);    }    return res.next;}</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><font color='red'>1.第一版就是按照思路一步一步完成的。   <p>2.第二版去掉了临时变量，直接遍历两个链表，以减少内存开销  </p><p>3.终版是去掉了两次重复的判断，以减少时间开销    </p><p>4.结果的存储采用尾插法<br></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
